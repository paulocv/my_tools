"""
I'm creating this file to define a few guidelines for my python
script files.
This is focused on full, formal scripts, meant to read a main
parameter file and export outputs to a directory.
"""
import argparse
from pathlib import Path
import yaml  # Requires: PyYaml


def main():
    # --- Preamble operations
    args = get_arg_parser().parse_args()
    # args: CLArgs = get_arg_parser().parse_known_args()
    #               ^ ^ Use this to accept extra unknown arguments.

    params: Params = import_params(args)
    data = Data()

    # (Erase this line: check here if parameters were properly imported)
    print(f"WATCHPOINT: input_params = \n{params.__dict__}")

    # # --- Main operations
    # ... Call operations here


# -------------------------------------------------------------------
# PROGRAM STRUCTURES
# -------------------------------------------------------------------

class Params:
    """All parameters. Include hardcoded script params, those read
    from inputs, and overriden by command line flags.

    Parameters will have type hints in PyCharm, but raise
    AttributeError if referenced before assignment.

    This class works more as an autocomplete guide. It will receive
    any parameter that is either defined here, at the input
    file or command line arguments.
    """
    param_01: int  # Typed
    param_02: str = "default_value"  # Typed with default
    param_03: None  # Not typed

    input_file: Path
    output_dir: Path
    # ...


class Data:
    """This class should hold data that is created during the execution
    of the program, but not directly informed in the main input file.
    """
    data_01: None  # pd.Series, np.ndarray, list, etc...
    # ...


# -------------------------------------------------------------------
# PROGRAM PROCEDURES
# -------------------------------------------------------------------

def get_arg_parser() -> argparse.ArgumentParser:
    """Interprets and stores the command line arguments."""

    parser = argparse.ArgumentParser(
        # usage="[[COMMAND LINE SIGNATURE (autogenerated)[]",
        description="Run a sequence of calls to the RSV forecast script.",
        # epilog="[[TEXT DISPLAYED AFTER ARGUMENTS DESCRIPTION]]",
    )

    # --- Positional paths
    parser.add_argument(
        "input_file", type=Path,
        help="Path to the file with input parameters."
    )
    parser.add_argument(
        "output_dir", type=Path,
        help="Path to the output directory, where all "
             "output files are stored."
    )

    # --- Optional flags
    parser.add_argument(  # Example. Retrieve as `optional_arg`
        "--optional-arg", type=str,
        help="Path to the output directory, where all "
             "output files are stored.",
        default=None
    )

    return parser


def import_params(args):
    """Imports the main YAML parameter file."""
    # --- Read file
    with open(args.input_file, "r") as fp:
        input_dict = yaml.load(fp, yaml.Loader)

    # --- Select command line arguments that are not `None`
    valid_args_dict = {
        key: val for key, val in args.__dict__.items() if val is not None
    }

    # --- Populate the Params in priority order
    # Script Default < Input File < Command Line Arguments
    params = Params()
    params.__dict__.update(input_dict)
    params.__dict__.update(valid_args_dict)

    # params.input_dict = input_dict  # Use this to keep the input_dict

    # You can rename parameters here.

    return params


if __name__ == "__main__":
    main()
